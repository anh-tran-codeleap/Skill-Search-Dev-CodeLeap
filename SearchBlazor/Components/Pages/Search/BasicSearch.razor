@page "/basic-search"
@using SearchBlazor.Components.BasicSearch
@rendermode InteractiveServer

<PageTitle>Prose Search</PageTitle>

<BSRow>
    <BSCol Column="12" Padding="Padding.Small">
    </BSCol>
</BSRow>

<EditForm Model="@searchModel" OnValidSubmit="@HandleSearch">
    <DataAnnotationsValidator />
    <BSRow Padding="Padding.None">
        <BSCol Column="4" PaddingStart="Padding.Small">
            <BlazoredTypeahead SearchMethod="HandleTypeAhead" TValue="string" TItem="string" Value="selectedSearchText"
                ValueChanged="SelectedSearchTextChanged" ValueExpression="@(() => selectedSearchText)"
                Placeholder="Enter Prose Text...">
                <SelectedTemplate Context="searchText">
                    @((MarkupString)@searchText)
                </SelectedTemplate>
                <ResultTemplate Context="searchText">
                    @((MarkupString)@searchText)
                </ResultTemplate>
            </BlazoredTypeahead>
        </BSCol>
        @* <BSCol Column="1" Padding="Padding.None">
            <BSButton type="Submit" Color="BSColor.Primary" PaddingTopAndBottom="Padding.Small">Search</BSButton>
        </BSCol> *@
    </BSRow>
</EditForm>

@if (@SearchText != String.Empty)
{
    <BSRow>
        <BSCol Column="12">
            <div class="mb-12">
                @if (@SearchResultsCount == 1)
                {
                    <div>@SearchResultsCount Result</div>
                }
                else
                {
                    <div>@SearchResultsCount Results</div>
                }
            </div>
        </BSCol>
    </BSRow>
}

@if (@SearchResultsCount > 0)
{
    <BSRow>
        <BSCol Column="12" Padding="Padding.Small">
        </BSCol>
    </BSRow>

    <BSRow>
        <BSCol Column="9">
            <div class="mb-9">
                <BSListGroup>
                    @foreach (var result in @searchModel.SearchResults)
                    {
                        <BSListGroupItem>
                            <p class="mb-1">@result.Name</p>

                            <p class="mb-1">
                                <strong>Versions:</strong>
                                @if (result.Versions.Any())
                                {
                                    <span>@string.Join(", ", result.Versions)</span>
                                }
                                else
                                {
                                    <span>Versions is empty</span>
                                }
                            </p>

                            <p class="mb-1">@result.Group</p>
                            <p class="mb-1">@result.Category</p>

                            <p class="mb-1">
                                <strong>Dependencies:</strong>
                                @if (result.Dependencies.Any())
                                {
                                    <span>@string.Join(", ", result.Dependencies)</span>
                                }
                                else
                                {
                                    <span>Dependencies is empty</span>
                                }
                            </p>

                            <p class="mb-1">
                                <strong>Related Skills:</strong>
                                @if (result.RelatedSkills.Any())
                                {
                                    <span>@string.Join(", ", result.RelatedSkills)</span>
                                }
                                else
                                {
                                    <span>Related Skills is empty</span>
                                }
                            </p>
                        </BSListGroupItem>

                        @* <BSListGroupItem>
                            <p class="mb-1">@result.Name</p>
                            <pre>@(result.Versions.Count() == 0 ? "Versions is empty" : "Versions has values: " + string.Join(", ", result.Versions))</pre>
                            <p class="mb-1">@result.Group</p>
                            <p class="mb-1">@result.Category</p>
                            <pre>@(result.RelatedSkills.Count() == 0 ? "Versions is empty" : "Versions has values: " + string.Join(", ", result.RelatedSkills))</pre>
                        </BSListGroupItem> *@
                    }
                </BSListGroup>
            </div>
        </BSCol>
    </BSRow>
    @if (@PageCount > 1)
    {
        <BSRow>
            <BSCol Column="12" Padding="Padding.Small">
            </BSCol>
        </BSRow>

        <BSRow @onclick="UpdatePage">
            <BSCol Column="9">
                <div class="mb-9">
                    <BSPagination Pages=@PageCount @bind-Value="Page" />
                </div>
            </BSCol>
        </BSRow>
    }

    <BSRow>
        <BSCol Column="12" Padding="Padding.Large">
        </BSCol>
    </BSRow>
}

@code {
    private SearchModel searchModel = new SearchModel();
    private string selectedSearchText;
    [Parameter]
    public int Page { get; set; } = 1;
    [Parameter]
    public int PageCount { get; set; } = 0;
    [Parameter]
    public string SearchText { get; set; } = string.Empty;
    [Parameter]
    public int SearchResultsCount { get; set; } = 0;
    private void SelectedSearchTextChanged(string result)
    {
        selectedSearchText = result;
        searchModel.SearchText = result;
        HandleSearch();
    }
    private void HandleSearch()
    {
        searchModel = SearchEngineDB.Search(searchModel.SearchText, 1);
        SearchResultsCount = searchModel.ResultsCount;
        PageCount = searchModel.PageCount;
        SearchText = searchModel.SearchText;
        Page = 1;
    }

    private void UpdatePage()
    {
        searchModel = SearchEngine.Search(searchModel.SearchText, Page);
    }

    private async Task<IEnumerable<String>> HandleTypeAhead(string searchText)
    {
        List<string> SResult = SearchEngineDB.SearchAhead(searchText);
        return await Task.FromResult(SResult);
    }
}